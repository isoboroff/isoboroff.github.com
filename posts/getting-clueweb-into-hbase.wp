<html><body><p>I have a simple webtable in <a href="http://hbase.apache.org/">HBase</a> to hold the <a href="http://boston.lti.cs.cmu.edu/Data/clueweb09/">Clueweb09</a> collection.  The english portion of Clueweb09 is around 500 million web pages or 12.5TB of data.  I recommend reading the above link for details on Clueweb09; in <a href="http://trec.nist.gov/">TREC</a>, we are using it in several tracks focusing on different aspects of web search.</p><p></p> I wanted to put Clueweb into HBase to make it easy to fetch individual web pages from the collection and show them to a user, who then analyzes the web page and determines if it is relevant to some search topic.  We have an existing method for this, but it doesn't scale to large collections.  My simple webtable has the following structure:<p></p> <span style="font-family: courier new,monospace;">hbase(main):002:0&gt; create 'webtable', {NAME =&gt; 'content', BLOCKSIZE =&gt; '1048576'}, 'meta'</span><p></p>That is, two column families: 'content' and 'meta'.  Content maps a url to the web page content.  Meta is for general metadata, but at the moment it just maps the internal Clueweb document identifiers to the corresponding url.  Using this structure, I can retrieve documents either by url or by document identifier, and support fetching individual documents as well as browsing within the collection.  The content content family has a larger blocksize (1MB), but otherwise there are no changes from the stock table settings.<p></p> My cluster is fairly small in terms of cores and memory, but large on storage.  I have 14 physical nodes, each with 8 cores, 8GB of RAM, and 12.5TB of storage disk in seven spindles.  The first node is the NameNode, JobTracker, and HBase master, and has its storage striped into a RAID-5.  The second node mirrors the namenode storage, and also acts as the SecondaryNameNode.  The remaining twelve nodes keep the seven data disks separate, and each run a DataNode, TaskTracker, and RegionServer.  I'm running Cloudera's CDH3 beta (737) on top of CentOS-5.<p></p> For Hadoop's configuration, I have HDFS replicating each block to three locations.  The processes on the NN get more heap, but on the workers, heap is limited to 1GB per process.  I use the FairScheduler and allow 3 mappers and 3 reducers to run on each host.  <p></p> For HBase, I started with a region filesize of 2GB.  I based this on estimating that I wanted around 500 regions per node once all the data was loaded, and 500 * 2GB * 12 equals around 12.5TB.  Later on as I was loading data, I found that I was getting more than 700 regions per node and timeouts during put calls, so I bumped the region max to 4GB, and added an hbase.client.pause of 5000 (5ms).<p></p> I split the collection into ten pieces, so I could load it a piece at a time and start over when I needed to.  At the beginning, I loaded 1.25TB of text in 4 hours.  As more and more data was loaded, this crept up to 8 hours.  I think the time would have been kept lower overall if I'd started with 4GB regions, rather than loading nearly all the data with 2GB regions and bumping it up near the end.<p></p> Now, some code.  Below I'm including snippets; you can find the full source code at <a href="https://github.com/isoboroff/clueweb-hbase">https://github.com/isoboroff/clueweb-hbase</a>.  First is an input format for reading the ClueWeb documents.  It has some helpful machinery for traversing directories, but its basic job is to read a single WARC entry at a time and return it as a String.<p></p> <br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">public class ClueWebInputFormat extends FileInputFormat&lt;LongWritable, Text&gt; {</span><p></p> <span style="font-family: courier new,monospace;">    public static final Log LOG =</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        LogFactory.getLog(ClueWebInputFormat.class);</span><p></p> <span style="font-family: courier new,monospace;">    @Override</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    public boolean isSplitable(JobContext job, Path filename) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        return false;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    @Override </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    public RecordReader&lt;LongWritable, Text&gt; </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        createRecordReader(InputSplit split, TaskAttemptContext context)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        throws IOException {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        ClueWebRecordReader rr = new ClueWebRecordReader();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        rr.initialize(split, context);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        return rr;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><p></p><span style="font-family: courier new,monospace;">   </span><span style="font-family: courier new,monospace;"> public static class ClueWebRecordReader </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        extends RecordReader&lt;LongWritable, Text&gt; {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private long start;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private long end;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private long pos;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private Path path;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private LineRecordReader in;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private LongWritable cur_key = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private Text cur_val = null;</span><p></p> <span style="font-family: courier new,monospace;">        public ClueWebRecordReader() {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            </span><p></p><span style="font-family: courier new,monospace;">        public void initialize(InputSplit split, TaskAttemptContext context)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            throws IOException {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            cur_key = new LongWritable(0);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            try {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                if (split instanceof FileSplit) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    path = ((FileSplit)split).getPath();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                } else {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    path = new Path("");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                start = 0;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                pos = 0;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                end = split.getLength();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                in = new LineRecordReader();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                in.initialize(split, context);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            } catch (InterruptedException ie) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                throw new IOException(ie);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        public LongWritable getCurrentKey() { </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            return cur_key;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        public Text getCurrentValue() { </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            return cur_val; </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><p></p> <span style="font-family: courier new,monospace;">        private Text hold = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private long last_pos = 0;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        StringBuilder buf = null;</span><p></p><span style="font-family: courier new,monospace;">        public synchronized boolean nextKeyValue() </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            throws IOException {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            Text line = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            cur_val = new Text();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            boolean in_doc = false;</span><p></p> <span style="font-family: courier new,monospace;">            if (buf == null)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                buf = new StringBuilder();</span><p></p> <span style="font-family: courier new,monospace;">            if (hold != null) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                buf.append(hold.toString()).append("\n");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                hold = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                in_doc = true;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            try {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                while (in.nextKeyValue()) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    line = in.getCurrentValue();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    int size = line.getLength();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    last_pos = pos;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    pos += size;</span><p></p> <span style="font-family: courier new,monospace;">                    if (line.find("WARC/0.18") == 0) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                        if (in_doc) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                            in_doc = false;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                            hold = line;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                            break;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                        } else {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                            in_doc = true;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                            continue;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    }</span><p></p> <span style="font-family: courier new,monospace;">                    if (in_doc)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                        buf.append(line.toString()).append("\n");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            } catch (java.io.IOException e) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            }</span><p></p><span style="font-family: courier new,monospace;">            if (buf.length() &gt; 0) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                cur_val.set(buf.toString());</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                cur_key.set(cur_key.get() + 1);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                buf = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                return true;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            } else {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                LOG.info("nkv returning false");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                return false;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><p></p><span style="font-family: courier new,monospace;">        public float getProgress() {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            return Math.min(1.0f, (pos) / (float)(end));</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><p></p> <span style="font-family: courier new,monospace;">        public synchronized void close() throws IOException {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            if (in != null) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                in.close();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">}</span><p>Next is the MapReduce class to load the data.  This is adapted from example code that comes with HBase.</p><p><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">public class LoadClue {</span></p><p></p> <span style="font-family: courier new,monospace;">    private static final String NAME = "LoadClue";</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    private static String reverse_hostname(String uri) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        URL url = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        try {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            url = new URL(uri);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        } catch (MalformedURLException mue) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            return null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        String host = url.getHost();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        StringBuilder newhost = new StringBuilder();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        String[] parts = host.split("\\.", 0);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        for (int i = parts.length - 1; i &gt; 0; i--) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            if (i &gt; 0)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                newhost.append(parts[i]).append(".");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        newhost.append(parts[0]);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        int port = url.getPort();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        if (port != -1)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            newhost.append(":").append(port);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        newhost.append(url.getFile());</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        return newhost.toString();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><p></p><span style="font-family: courier new,monospace;">    private static HashMap&lt;String, String&gt; get_headers(String doc) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        HashMap&lt;String, String&gt; hdr = new HashMap(20);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        try {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            BufferedReader in = new BufferedReader(new StringReader(doc));</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            int nl = 0;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            String line = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            while ((line = in.readLine()) != null) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                if (line.length() == 0)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    nl++;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                if (nl == 2)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    break;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                int i = line.indexOf(':');</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                if (i == -1)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    continue;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                try {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    hdr.put(line.substring(0, i), line.substring(i+2));</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                } catch (Exception e) {}</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            StringBuilder buf = new StringBuilder();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            while ((line = in.readLine()) != null) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                buf.append(line).append('\n');</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            hdr.put("document", buf.toString());</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        } catch (IOException e) {}</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        return hdr;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><p></p><span style="font-family: courier new,monospace;">    protected static String table_name = null;</span><p></p> <span style="font-family: courier new,monospace;">    protected static void setTableName(String n) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        table_name = n;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><p></p><span style="font-family: courier new,monospace;">    static class Uploader </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        extends Mapper&lt;LongWritable, Text, ImmutableBytesWritable, Put&gt; {</span><p></p> <span style="font-family: courier new,monospace;">        private long checkpoint = 1000;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        private long count = 0;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        @Override</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            public void map(LongWritable key, Text value, Context context)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            throws IOException {</span><p></p> <span style="font-family: courier new,monospace;">            String raw = value.toString();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            HashMap&lt;String, String&gt; parse = get_headers(raw);</span><p></p> <span style="font-family: courier new,monospace;">            if (parse.get("WARC-Type").equals("response")) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                String uri = parse.get("WARC-Target-URI");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                if (uri == null) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    System.err.println("Doc has no target-uri");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    return;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                String keystr = reverse_hostname(uri);</span><p></p> <span style="font-family: courier new,monospace;">                byte[] row = Bytes.toBytes(keystr);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                byte[] family = Bytes.toBytes("content");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                byte[] qualifier = Bytes.toBytes("raw");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                byte[] val = Bytes.toBytes(parse.get("document"));</span><p></p> <span style="font-family: courier new,monospace;">                // Create Put</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                Put put = new Put(row);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                put.add(family, qualifier, val);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">      </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                // Uncomment below to disable WAL. This will improve</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                // performance but means you will experience data loss in</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                // the case of a RegionServer crash.</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                put.setWriteToWAL(false);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                String trecid = parse.get("WARC-TREC-ID");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                byte[] row2 = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                Put put2 = null;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                if (trecid != null) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    row2 = Bytes.toBytes(parse.get("WARC-TREC-ID"));</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    put2 = new Put(row2);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    byte[] fam2 = Bytes.toBytes("meta");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    byte[] qual2 = Bytes.toBytes("url");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    byte[] val2 = row;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    put2.add(fam2, qual2, val2);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    put2.setWriteToWAL(false);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                }</span><p></p><span style="font-family: courier new,monospace;">                try {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    context.write(new ImmutableBytesWritable(row), put);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    if (trecid != null)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                        context.write(new ImmutableBytesWritable(row2), put2);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                } catch (InterruptedException e) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    e.printStackTrace();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                // Set status every checkpoint lines</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                if(++count % checkpoint == 0) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                    context.setStatus("Emitting doc " + count);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><p></p><span style="font-family: courier new,monospace;">        @Override </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            public void cleanup(Context context) </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            throws IOException {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            if (LoadClue2.table_name == null)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">                return;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            context.setStatus("Sending flush");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            HBaseAdmin admin = new HBaseAdmin(context.getConfiguration());</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            admin.flush(LoadClue2.table_name);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    /**</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     * Job configuration.</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     */</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    public static Job configureJob(Configuration conf, String [] args)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        throws IOException {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        Path inputPath = new Path(args[0]);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        String tableName = args[1];</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        Job job = new Job(conf, NAME + "_" + tableName);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        job.setJarByClass(Uploader.class);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        FileInputFormat.setInputPaths(job, inputPath);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        job.setInputFormatClass(ClueWebInputFormat.class);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        job.setMapperClass(Uploader.class);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        LoadClue2.setTableName(tableName);</span><p></p> <span style="font-family: courier new,monospace;">        // No reducers.  Just write straight to table.  Call initTableReducerJob</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        // because it sets up the TableOutputFormat.</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        TableMapReduceUtil.initTableReducerJob(tableName, null, job);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        TableMapReduceUtil.addDependencyJars(conf, TableOutputFormat.class);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        job.setNumReduceTasks(0);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        return job;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><p></p> <span style="font-family: courier new,monospace;">    /**</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     * Main entry point.</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     * </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     * @param args  The command line parameters.</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     * @throws Exception When running the job fails.</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     */</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    public static void main(String[] args) throws Exception {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        Configuration conf = HBaseConfiguration.create();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        if(otherArgs.length != 2) {</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            System.err.println("Wrong number of arguments: " + otherArgs.length);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            System.err.println("Usage: " + NAME + " &lt;input&gt; &lt;tablename&gt;");</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">            System.exit(-1);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        Job job = configureJob(conf, otherArgs);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        boolean result = job.waitForCompletion(true);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        System.out.println("Flushing table " + otherArgs[1]);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        HBaseAdmin admin = new HBaseAdmin(conf);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        admin.flush(otherArgs[1]);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">        System.exit((result == true) ? 0 : 1);</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">    }</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">}</span></body></html>